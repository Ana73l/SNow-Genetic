<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_116151_genetic.Individual</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>Individual</name>
        <script><![CDATA[var Individual = Class.create();

Individual.createRandom = function(/*Array*/ genePool, /*Number*/ chromosomeSize, /*Function*/ calculator) {
	if(!genePool) {
		throw 'Error generating random individual: gene pool cannot be falsy.';
	}
	if(!chromosomeSize) {
		throw 'Error generating random individual: chromosome size cannot be falsy.';
	}
	if(!calculator) {
		throw 'Error generating random individual: fitness calculator function not set.';
	}
	
	var chromosome = Chromosome.createRandom(genePool, chromosomeSize);
	
	return new Individual(chromosome, calculator);
};

Individual.copy = function(/*Individual*/ individual) {
	if(!individual) {
		throw 'Error copying individual: individual passed cannot be falsy.';
	}
	
	var chromosome = individual.chromosome().copy();
	
	return new Individual(chromosome, individual.fitnessCalculator());
};

Individual.prototype = {
	
    initialize: function(/*Chromosome*/ chromosome, /*Function*/ fitnessCalculator) {
		if(!chromosome) {
			throw 'Error initializing Individual: passed chromosome cannot be falsy.';
		}
		if(!fitnessCalculator) {
			throw 'Error initializing Individual: passed fitness calculator function cannot be falsy.';
		}
		
		this._chromosome = chromosome;
		this._fitnessCalculator = fitnessCalculator;
    },
	
	fitnessCalculator: function() {
		return this._fitnessCalculator;
	},
	
	fitness: function() {
		var fitness = 0;
		var calculator = this.fitnessCalculator();
		
		if(typeof calculator == 'function') {
			fitness = calculator(this.copy());
		}
		
		return fitness;
	},
	
	mutate: function(genePool) {
		if(!genePool) {
			throw 'Error mutating individual: gene pool cannot be falsy.';
		}
		var chromosome = this.chromosome().mutate(genePool);
		
		return new Individual(chromosome, this.fitnessCalculator());
	},
	
	crossover: function(/*Individual*/ otherIndividual) {
		if(!otherIndividual) {
			throw 'Error crossing over individuals: passed individual cannot be empty.';
		}
		
		var otherChromosome = otherIndividual.chromosome();
		var chromosome = this.chromosome().crossover(otherChromosome);
		
		return new Individual(chromosome, this.fitnessCalculator());
	},
	
	chromosome: function() {
		return this._chromosome;
	},
	
	copy: function() {
		var chromosome = this.chromosome().copy();
		
		return new Individual(chromosome, this.fitnessCalculator());
	},
	
	toString: function() {
		var self = this;
		
		return JSON.stringify({
			fitness: self.fitness(),
			chromosome: self.chromosome().toString()
		});
	},
	
    type: 'Individual'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-26 00:27:28</sys_created_on>
        <sys_id>ed2c1e3cdb022300748cf282399619e8</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>Individual</sys_name>
        <sys_package display_value="Genetic" source="x_116151_genetic">c9fd8634db022300748cf282399619af</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Genetic">c9fd8634db022300748cf282399619af</sys_scope>
        <sys_update_name>sys_script_include_ed2c1e3cdb022300748cf282399619e8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-27 03:34:40</sys_updated_on>
    </sys_script_include>
</record_update>
